diff --git a/app/actions/search.js b/app/actions/search.js
index fb413ac..77fa82c 100644
--- a/app/actions/search.js
+++ b/app/actions/search.js
@@ -18,11 +18,19 @@ const apiGetDocument = (id) => ({
   },
 });
 
+const apiGetEvent = (id) => ({
+  data: {
+    title: 'Titel!',
+    id: { id },
+  },
+});
+
 const toggleDrawer = createAction(actions.TOGGLE_DRAWER);
 const setHitCount = createAction(actions.SET_HIT_COUNT);
 
 export {
   apiGetDocument,
+  apiGetEvent,
   toggleDrawer,
   setHitCount,
 };
diff --git a/app/components/EventShow/index.jsx b/app/components/EventShow/index.jsx
new file mode 100644
index 0000000..40cf7a0
--- /dev/null
+++ b/app/components/EventShow/index.jsx
@@ -0,0 +1,36 @@
+// @flow
+import React, { PropTypes } from 'react';
+import {
+  Box,
+  Detail,
+  DetailsBar,
+  Heading,
+} from '../';
+
+const propTypes = {
+  data: PropTypes.object.isRequired,
+  loading: false,
+};
+
+const EventShow = ({ data }) => {
+  const {
+    classification,
+    date,
+    title,
+    text,
+  } = data;
+
+  return (
+    <Box>
+      <Heading children={title} />
+      <DetailsBar>
+        <Detail text={classification} icon="file-o" />
+        <Detail text={date} icon="clock-o" />
+      </DetailsBar>
+    </Box>
+  );
+};
+
+EventShow.propTypes = propTypes;
+
+export default EventShow;
diff --git a/app/containers/EventContainer.jsx b/app/containers/EventContainer.jsx
new file mode 100644
index 0000000..95d84e8
--- /dev/null
+++ b/app/containers/EventContainer.jsx
@@ -0,0 +1,53 @@
+// @flow
+import React, { Component, PropTypes } from 'react';
+import { connect } from 'react-redux';
+import { EventShow } from '../components';
+import Motion from '../models/Motion';
+
+const renderMotion = (data) => (
+  <EventShow data={data} />
+);
+
+const propTypes = {
+  data: PropTypes.instanceOf(Event),
+};
+
+const defaultProps = {
+  renderItem: renderMotion,
+  showArguments: false,
+};
+
+class MotionContainer extends Component {
+  componentWillMount() {
+    const { data, loadMotion } = this.props;
+    if (data === undefined) {
+      loadMotion();
+    }
+  }
+
+  render() {
+    const { data, renderItem, showArguments } = this.props;
+    return <div>{data && renderItem(data, showArguments)}</div>;
+  }
+}
+
+const mapStateToProps = (state, ownProps) => {
+  const findMotion = state.getIn(['motions', 'items', ownProps.motionId]);
+  return {
+    data: findMotion,
+  };
+};
+
+const mapDispatchToProps = (dispatch, ownProps) => ({
+  loadMotion: () => {
+    dispatch(Motion.fetch(ownProps.motionId));
+  },
+});
+
+MotionContainer.propTypes = propTypes;
+MotionContainer.defaultProps = defaultProps;
+
+export default connect(
+  mapStateToProps,
+  mapDispatchToProps
+)(MotionContainer);
diff --git a/app/routes.js b/app/routes.js
index fa12597..79003a8 100644
--- a/app/routes.js
+++ b/app/routes.js
@@ -4,6 +4,7 @@ import { App } from './components';
 import {
   CompareVotes,
   Document,
+  Event,
   Home,
   Motion,
   Motions,
@@ -28,6 +29,7 @@ const routes = (
     </Route>
     <Route path="search" component={Search} />
     <Route path="doc/:docId" component={Document} />
+    <Route path="event/:eventId" component={Event} />
     <Route path="*" component={NotFound} />
   </Route>
 );
diff --git a/app/views/Event.jsx b/app/views/Event.jsx
new file mode 100644
index 0000000..bdf1cab
--- /dev/null
+++ b/app/views/Event.jsx
@@ -0,0 +1,36 @@
+// @flow
+import React, { PropTypes } from 'react';
+import { connect } from 'react-redux';
+import Helmet from 'react-helmet';
+
+import EventContainer from '../containers/EventContainer';
+import { Container } from '../components';
+
+const propTypes = {
+  params: PropTypes.shape({
+    motionId: PropTypes.string.isRequired,
+  }),
+  title: PropTypes.string,
+};
+
+const defaultProps = {
+};
+
+const Event = ({ title, params }) => (
+  <Container>
+    <span>Waarom rendert dit nergens?</span>
+    <Helmet title={title} />
+    <EventContainer motionId={params.eventId} />
+  </Container>
+);
+
+Event.defaultProps = defaultProps;
+Event.propTypes = propTypes;
+
+const stateToProps = () => {
+  return {
+    title: 'Event Title',
+  };
+};
+
+export default connect(stateToProps)(Event);
